{"version":3,"sources":["components/header.jsx","components/features.jsx","components/about.jsx","components/services.jsx","components/gallery.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","props","id","className","src","alt","Features","type","data-toggle","data-target","href","About","Services","Gallery","App","SmoothScroll","speed","speedAsDuration","useState","landingPageData","setLandingPageData","useEffect","JsonData","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAAaA,EAAS,SAACC,GACrB,OACE,wBAAQC,GAAG,SAAX,SACE,qBAAKC,UAAU,QAAf,SACE,qBAAKA,UAAU,UAAf,SACE,qBAAKA,UAAU,GAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,+DAAf,SAIE,qBAAKC,IAAI,wBAAwBC,IAAI,GAAGF,UAAU,4BCXrDG,EAAW,SAACL,GACvB,OACE,qBAAKC,GAAG,WAAR,SACE,qBAAKC,UAAU,wBAAf,SACE,gCACE,qBAAKA,UAAU,iBAAf,SACE,yBAAQI,KAAK,SAASJ,UAAU,gBAAgBK,cAAY,WAAWC,cAAY,YAAnF,UACE,sBAAMN,UAAU,aAChB,sBAAMA,UAAU,aAChB,sBAAMA,UAAU,kBAIpB,sBAAKA,UAAU,2BAA2BD,GAAG,WAA7C,UACE,qBAAIC,UAAU,8BAAd,UACE,6BAAI,mBAAGO,KAAK,IAAR,SAAY,+CAChB,6BAAI,mBAAGA,KAAK,IAAR,SAAY,6CAChB,6BAAI,mBAAGA,KAAK,IAAR,SAAY,+CAElB,qBAAKP,UAAU,yBCnBdQ,EAAQ,SAACV,GACpB,OACE,qBAAKC,GAAG,QAAR,SACE,8BACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,8BAAf,SACE,mBAAGO,KAAO,IAAV,SACA,qBAAKN,IAAI,4BAA4BD,UAAU,cAAcE,IAAI,SAGnE,qBAAKF,UAAU,8BAAf,SACA,mBAAGO,KAAO,IAAV,SACE,qBAAKN,IAAI,4BAA4BD,UAAU,cAAcE,IAAI,iBCZhEO,EAAW,SAACX,GACvB,OACE,qBAAKC,GAAG,WAAWC,UAAU,cAA7B,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,6CACA,0GCJGU,EAAU,SAACZ,GACtB,OACE,qBAAKC,GAAG,YAAYC,UAAU,cAA9B,SAEE,qBAAKA,UAAU,UAAf,SACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,+DAAf,SACE,qBAAKC,IAAI,qBAAqBC,IAAI,GAAGF,UAAU,mBAGrD,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,uCAAf,SAAsD,iE,wCC0BjDW,G,MA1BO,IAAIC,IAAa,eAAgB,CACrDC,MAAO,IACPC,iBAAiB,IAGP,WAAO,IAAD,EAC8BC,mBAAS,IADvC,mBACTC,EADS,KACQC,EADR,KAMhB,OAJAC,qBAAU,WACRD,EAAmBE,KAClB,IAGD,gCAEE,cAAC,EAAD,CAAQC,KAAMJ,EAAgBnB,SAC9B,cAAC,EAAD,CAAUuB,KAAMJ,EAAgBb,WAChC,cAAC,EAAD,CAAOiB,KAAMJ,EAAgBR,QAC7B,cAAC,EAAD,CAAUY,KAAMJ,EAAgBP,WAChC,cAAC,EAAD,CAASW,KAAMJ,EAAgBN,eCpBjBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8e658931.chunk.js","sourcesContent":["export const Header = (props) => {\n  return (\n    <header id='header'>\n      <div className='intro'>\n        <div className='overlay'>\n          <div className=''>\n            <div className='row'>\n              <div className='col-md-4 col-md-offset-4 col-xs-8 col-xs-offset-2 intro-text'>\n                {/* <div className=\"intro-logo\">\n\n                </div> */}\n                <img src=\"img/vswap/Profile.jpg\" alt=\"\" className=\"intro-logo\"/>\n                {/* <h1>\n                  {props.data ? props.data.title : 'Loading'}\n                  <span></span>\n                </h1> */}\n                {/* <p>{props.data ? props.data.paragraph : 'Loading'}</p> */}\n                {/* <a\n                  href='#features'\n                  className='btn btn-custom btn-lg page-scroll'\n                >\n                  Learn More\n                </a>{' '} */}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n","export const Features = (props) => {\n  return (\n    <div id='features'>\n      <nav className=\"navbar navbar-inverse\">\n        <div>\n          <div className=\"navbar-header \">\n            <button type=\"button\" className=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\">\n              <span className=\"icon-bar\"></span>\n              <span className=\"icon-bar\"></span>\n              <span className=\"icon-bar\"></span>\n            </button>\n            {/* <a className=\"navbar-brand\" href=\"#\">WebSiteName</a> */}\n          </div>\n          <div className=\"collapse navbar-collapse\" id=\"myNavbar\">\n            <ul className=\"nav navbar-nav navbar-right\">\n              <li><a href=\"#\"><h2>OURSELVES</h2></a></li>\n              <li><a href=\"#\"><h2>ROADMAP</h2></a></li>\n              <li><a href=\"#\"><h2>SEARCH</h2></a></li>\n            </ul>\n            <div className=\"clear-fix\"></div>\n          </div>\n        </div>\n      </nav>\n    </div>\n  )\n}\n","export const About = (props) => {\n  return (\n    <div id=\"about\">\n      <div>\n        <div className=\"row\">\n          <div className=\"col-xs-6 col-md-6 about-col\">\n            <a href = \"#\">\n            <img src=\"img/vswap/ConceptArt2.jpg\" className=\"about-logo2\" alt=\"\" />\n            </a>\n          </div>\n          <div className=\"col-xs-6 col-md-6 about-col\">\n          <a href = \"#\">\n            <img src=\"img/vswap/ConceptArt1.jpg\" className=\"about-logo2\" alt=\"\" />\n          </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const Services = (props) => {\n  return (\n    <div id='services' className='text-center'>\n      <div className='container'>\n        <div className='section-title'>\n          <h2>Blank Space</h2>\n          <p>\n            Blank spave for another illustration, direct link to concept art.\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { Image } from \"./image\";\n\nexport const Gallery = (props) => {\n  return (\n    <div id='portfolio' className='text-center'>\n\n      <div className='overlay'>\n        <div className='gallery-back'>\n          <div className='row'>\n            <div className='col-md-2 col-md-offset-5 col-xs-4 col-xs-offset-4 intro-text'>\n              <img src=\"img/vswap/logo.png\" alt=\"\" className=\"intro-logo\" />\n            </div>\n          </div>\n        <div className=\"row\">\n          <div className=\"col-md-6 col-md-offset-3 text-center\"><h3>Contact Information</h3></div>\n        </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import { useState, useEffect } from \"react\";\nimport { Navigation } from \"./components/navigation\";\nimport { Header } from \"./components/header\";\nimport { Features } from \"./components/features\";\nimport { About } from \"./components/about\";\nimport { Services } from \"./components/services\";\nimport { Gallery } from \"./components/gallery\";\nimport { Testimonials } from \"./components/testimonials\";\nimport { Team } from \"./components/Team\";\nimport { Contact } from \"./components/contact\";\nimport JsonData from \"./data/data.json\";\nimport SmoothScroll from \"smooth-scroll\";\nimport \"./App.css\";\n\nexport const scroll = new SmoothScroll('a[href*=\"#\"]', {\n  speed: 1000,\n  speedAsDuration: true,\n});\n\nconst App = () => {\n  const [landingPageData, setLandingPageData] = useState({});\n  useEffect(() => {\n    setLandingPageData(JsonData);\n  }, []);\n\n  return (\n    <div>\n      {/* <Navigation /> */}\n      <Header data={landingPageData.Header} />\n      <Features data={landingPageData.Features} />\n      <About data={landingPageData.About} />\n      <Services data={landingPageData.Services} />\n      <Gallery data={landingPageData.Gallery}/>\n      {/* <Testimonials data={landingPageData.Testimonials} /> */}\n      {/* <Team data={landingPageData.Team} /> */}\n      {/* <Contact data={landingPageData.Contact} /> */}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}